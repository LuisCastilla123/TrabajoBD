// <auto-generated />
using System;
using CVMarker.Infrastructure.Context.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CVMaker.Infrastructure.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CVMaker.Domain.Entities.AcademicFields", b =>
                {
                    b.Property<long>("AcademicFieldsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("academic_field_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcademicFieldsID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("ExternalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime2")
                        .HasColumnName("updated_at");

                    b.HasKey("AcademicFieldsID")
                        .HasName("academic_fields_pkey");

                    b.HasIndex(new[] { "ExternalID" }, "academic_fields_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_academic_fields", (string)null);

                    b.HasData(
                        new
                        {
                            AcademicFieldsID = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ciencias Sociales",
                            ExternalID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            AcademicFieldsID = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ciencias Naturales",
                            ExternalID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            AcademicFieldsID = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Matematicas",
                            ExternalID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            AcademicFieldsID = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ingeneria",
                            ExternalID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            AcademicFieldsID = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tecnologia de la Informacion",
                            ExternalID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            AcademicFieldsID = 6L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ciencias de la Salud",
                            ExternalID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            AcademicFieldsID = 7L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ciencias de la Educacion",
                            ExternalID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            AcademicFieldsID = 8L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Artes",
                            ExternalID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            AcademicFieldsID = 9L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ciencias Economicas",
                            ExternalID = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            AcademicFieldsID = 10L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ciencias Politicas",
                            ExternalID = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.AcademicHistory", b =>
                {
                    b.Property<long>("AcademicHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("academic_history_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcademicHistoryID"));

                    b.Property<long>("AcademicFieldId")
                        .HasColumnType("bigint")
                        .HasColumnName("academicfieldid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("createdat");

                    b.Property<long>("DegreeId")
                        .HasColumnType("bigint")
                        .HasColumnName("degreeid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("enddate");

                    b.Property<Guid>("ExternalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("institutionname");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("specialty");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startdate");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("updatedat");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("AcademicHistoryID")
                        .HasName("academic_history_pkey");

                    b.HasIndex("AcademicFieldId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ExternalID" }, "academic_history_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_academic_history", (string)null);
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.Degrees", b =>
                {
                    b.Property<long>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("degreeid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DegreeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("updatedat");

                    b.HasKey("DegreeId")
                        .HasName("degrees_pkey");

                    b.HasIndex(new[] { "ExternalId" }, "degrees_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_degrees", (string)null);

                    b.HasData(
                        new
                        {
                            DegreeId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Primaria",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DegreeId = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Secundaria",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DegreeId = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Universidad",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DegreeId = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Maestria",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DegreeId = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Doctorado",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.JobTitles", b =>
                {
                    b.Property<long>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("jobtitleid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobTitleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("updatedat");

                    b.HasKey("JobTitleId")
                        .HasName("job_titles_pkey");

                    b.HasIndex(new[] { "ExternalId" }, "job_titles_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_job_titles", (string)null);

                    b.HasData(
                        new
                        {
                            JobTitleId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Desarrollador de sistemas",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Analista de compras",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Gerente de Mercado",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Director de Planta",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Coordinador de Produccion",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 6L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Asistente Personal",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 7L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consultar de Sistemas",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 8L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Arquitecto",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 9L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ingeniero electrico",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.Language", b =>
                {
                    b.Property<long>("languageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("languageid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("languageId"));

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("createdat");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("updatedat");

                    b.HasKey("languageId")
                        .HasName("languages_pkey");

                    b.HasIndex(new[] { "ExternalId" }, "languages_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_languages", (string)null);

                    b.HasData(
                        new
                        {
                            languageId = 1L,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Espanol",
                            updatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            languageId = 2L,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Ingles",
                            updatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            languageId = 3L,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Frances",
                            updatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            languageId = 4L,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Almenan",
                            updatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            languageId = 5L,
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            createdAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            description = "Italiano",
                            updatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.Skills", b =>
                {
                    b.Property<long>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("skillid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SkillId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("createdat");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("updatedat");

                    b.HasKey("SkillId")
                        .HasName("skills_pkey");

                    b.HasIndex(new[] { "ExternalId" }, "skills_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_skills", (string)null);
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("createdat");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("deletedat");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("emailconfirmed");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("hashedpassword");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("tag");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("twofactorenabled");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedat_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "ExternalId" }, "users_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_users", (string)null);
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.UsersInfo", b =>
                {
                    b.Property<long>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("userinfoid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserInfoId"));

                    b.Property<string>("AddressOne")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("addressone");

                    b.Property<string>("AddressTwo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("addresstwo");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("createdat");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsCitizen")
                        .HasColumnType("bit")
                        .HasColumnName("iscitizen");

                    b.Property<bool>("IsOver18")
                        .HasColumnType("bit")
                        .HasColumnName("isover18");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("updatedat");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("zipcode");

                    b.HasKey("UserInfoId")
                        .HasName("users_info_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ExternalId" }, "users_info_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_users_info", (string)null);
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.UsersInfoLanguages", b =>
                {
                    b.Property<long>("UserInfoLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("userinfo_language_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserInfoLanguageId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("Date")
                        .HasColumnName("createdat");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("languageid");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("level");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("updatedat");

                    b.Property<long>("UserInfoId")
                        .HasColumnType("bigint")
                        .HasColumnName("userinfoid");

                    b.HasKey("UserInfoLanguageId")
                        .HasName("users_info_languages_pkey");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserInfoId");

                    b.HasIndex(new[] { "ExternalId" }, "users_info_languages_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_users_info_languages", (string)null);
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.WorkExperiences", b =>
                {
                    b.Property<long>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("workexperienceid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WorkExperienceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("createdat");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("enddate");

                    b.Property<string>("EnterpriseName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("enterprisename");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("externalid")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<long>("JobTitleId")
                        .HasColumnType("bigint")
                        .HasColumnName("jobtitleid");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("responsibilities");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("startdate");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.HasKey("WorkExperienceId")
                        .HasName("workexperiences_pkey");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ExternalId" }, "workexperiences_externalid_key")
                        .IsUnique();

                    b.ToTable("workexperiences", (string)null);
                });

            modelBuilder.Entity("UsersSkills", b =>
                {
                    b.Property<long>("UserSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("userskillid");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserSkillId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("createdat");

                    b.Property<Guid>("ExternalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<long>("SkillId")
                        .HasColumnType("bigint")
                        .HasColumnName("skillid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("updatedat");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("userid");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("UserSkillId")
                        .HasName("users_skills_pkey");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1")
                        .IsUnique()
                        .HasFilter("[UserId1] IS NOT NULL");

                    b.HasIndex(new[] { "ExternalID" }, "users_skills_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_users_skills", (string)null);
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.AcademicHistory", b =>
                {
                    b.HasOne("CVMaker.Domain.Entities.AcademicFields", "AcademicField")
                        .WithMany("AcademicHistories")
                        .HasForeignKey("AcademicFieldId")
                        .IsRequired();

                    b.HasOne("CVMaker.Domain.Entities.Degrees", "Degree")
                        .WithMany("AcademicHistorys")
                        .HasForeignKey("DegreeId")
                        .IsRequired();

                    b.HasOne("CVMaker.Domain.Entities.User", "Users")
                        .WithMany("AcademicHistory")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("AcademicField");

                    b.Navigation("Degree");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.UsersInfo", b =>
                {
                    b.HasOne("CVMaker.Domain.Entities.User", "Users")
                        .WithMany("UserInfo")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.UsersInfoLanguages", b =>
                {
                    b.HasOne("CVMaker.Domain.Entities.Language", "Languages")
                        .WithMany("UserInfoLanguage")
                        .HasForeignKey("LanguageId")
                        .IsRequired();

                    b.HasOne("CVMaker.Domain.Entities.UsersInfo", "UserInfo")
                        .WithMany("UserInfoLanguage")
                        .HasForeignKey("UserInfoId")
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.WorkExperiences", b =>
                {
                    b.HasOne("CVMaker.Domain.Entities.JobTitles", "JobTitle")
                        .WithMany("WorkExperience")
                        .HasForeignKey("JobTitleId")
                        .IsRequired();

                    b.HasOne("CVMaker.Domain.Entities.User", "Users")
                        .WithMany("WorkExperience")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("JobTitle");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UsersSkills", b =>
                {
                    b.HasOne("CVMaker.Domain.Entities.Skills", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired();

                    b.HasOne("CVMaker.Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("UsersSkills", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVMaker.Domain.Entities.User", null)
                        .WithOne("UserSkills")
                        .HasForeignKey("UsersSkills", "UserId1");

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.AcademicFields", b =>
                {
                    b.Navigation("AcademicHistories");
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.Degrees", b =>
                {
                    b.Navigation("AcademicHistorys");
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.JobTitles", b =>
                {
                    b.Navigation("WorkExperience");
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.Language", b =>
                {
                    b.Navigation("UserInfoLanguage");
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.Skills", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.User", b =>
                {
                    b.Navigation("AcademicHistory");

                    b.Navigation("UserInfo");

                    b.Navigation("UserSkills")
                        .IsRequired();

                    b.Navigation("WorkExperience");
                });

            modelBuilder.Entity("CVMaker.Domain.Entities.UsersInfo", b =>
                {
                    b.Navigation("UserInfoLanguage");
                });
#pragma warning restore 612, 618
        }
    }
}
