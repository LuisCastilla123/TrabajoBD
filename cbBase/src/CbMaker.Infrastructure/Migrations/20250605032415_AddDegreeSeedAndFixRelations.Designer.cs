// <auto-generated />
using System;
using CbMaker.Infrastructure.Context.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CbMaker.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250605032415_AddDegreeSeedAndFixRelations")]
    partial class AddDegreeSeedAndFixRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CbMaker.Domain.AcademicField", b =>
                {
                    b.Property<long>("AcademicFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("academifield_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AcademicFieldId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("AcademicFieldId")
                        .HasName("academifields_pkey");

                    b.HasIndex(new[] { "ExternalId" }, "academifields_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_academifields", "dbo");
                });

            modelBuilder.Entity("CbMaker.Domain.AcademicHistory", b =>
                {
                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<long>("AcademicFieldId")
                        .HasColumnType("bigint")
                        .HasColumnName("academic_field_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long>("DegreeId")
                        .HasColumnType("bigint")
                        .HasColumnName("degree_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("institution_name");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("speciality");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("ExternalId")
                        .HasName("academichistories_pkey");

                    b.HasIndex("AcademicFieldId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ExternalId" }, "academichistories_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_academic_histories", "dbo");
                });

            modelBuilder.Entity("CbMaker.Domain.Degree", b =>
                {
                    b.Property<long>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("degree_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DegreeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("DegreeId")
                        .HasName("degrees_pkey");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("degrees_externalid_key");

                    b.ToTable("tb_degrees", "dbo");

                    b.HasData(
                        new
                        {
                            DegreeId = 1L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Primaria",
                            ExternalId = new Guid("11111111-1111-1111-1111-111111111111"),
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DegreeId = 2L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Secundaria",
                            ExternalId = new Guid("22222222-2222-2222-2222-222222222222"),
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DegreeId = 3L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Universidad",
                            ExternalId = new Guid("33333333-3333-3333-3333-333333333333"),
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DegreeId = 4L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Maestría",
                            ExternalId = new Guid("44444444-4444-4444-4444-444444444444"),
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            DegreeId = 5L,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Doctorado",
                            ExternalId = new Guid("55555555-5555-5555-5555-555555555555"),
                            UpdatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CbMaker.Domain.JobTitle", b =>
                {
                    b.Property<long>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("jobtitle_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobTitleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("description");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("JobTitleId")
                        .HasName("jobtitles_pkey");

                    b.HasIndex(new[] { "ExternalId" }, "jobtitles_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_job_titles", "dbo");

                    b.HasData(
                        new
                        {
                            JobTitleId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Desarrollador de sistemas",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Analista de compras",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Gerente de mercado",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Director de planta",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Coordinador",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 6L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Asistente personal",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 7L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consultor de sistemas",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 8L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Arquitecto",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            JobTitleId = 9L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ingeniero eléctrico",
                            ExternalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CbMaker.Domain.Language", b =>
                {
                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<long>("AcademicFieldId")
                        .HasColumnType("bigint")
                        .HasColumnName("academic_field_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("ExternalId")
                        .HasName("languages_pkey");

                    b.HasIndex("AcademicFieldId");

                    b.HasIndex(new[] { "ExternalId" }, "languages_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_languages", "dbo");
                });

            modelBuilder.Entity("CbMaker.Domain.Skill", b =>
                {
                    b.Property<long>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("skill_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SkillId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("SkillId")
                        .HasName("skills_pkey");

                    b.HasIndex(new[] { "ExternalId" }, "skills_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_skills", "dbo");
                });

            modelBuilder.Entity("CbMaker.Domain.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasMaxLength(10)
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("hash_password");

                    b.Property<byte[]>("HashSalting")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)")
                        .HasColumnName("hash_salting");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tag");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "ExternalId" }, "users_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_users", "dbo");
                });

            modelBuilder.Entity("CbMaker.Domain.UserInfo", b =>
                {
                    b.Property<long>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("userinfo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserInfoId"));

                    b.Property<string>("AddressOne")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address_one");

                    b.Property<string>("AddressTwo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address_two");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<bool>("IsCitizen")
                        .HasColumnType("bit")
                        .HasColumnName("is_citizen");

                    b.Property<bool>("IsOver18")
                        .HasColumnType("bit")
                        .HasColumnName("is_over_18");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<double>("ZipCode")
                        .HasColumnType("float")
                        .HasColumnName("zip_code");

                    b.HasKey("UserInfoId")
                        .HasName("userinfo_pkey");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "ExternalId" }, "userinfo_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_user_info", "dbo");
                });

            modelBuilder.Entity("CbMaker.Domain.UserInfoLanguage", b =>
                {
                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("LanguageId")
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("language_id");

                    b.Property<double>("Level")
                        .HasColumnType("float")
                        .HasColumnName("level");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserInfoId")
                        .HasMaxLength(100)
                        .HasColumnType("bigint")
                        .HasColumnName("user_info_id");

                    b.HasKey("ExternalId")
                        .HasName("userinfolanguages_pkey");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserInfoId");

                    b.HasIndex(new[] { "ExternalId" }, "userinfolanguages_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_user_info_languages", "dbo");
                });

            modelBuilder.Entity("CbMaker.Domain.UserSkill", b =>
                {
                    b.Property<long>("UserSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_skill_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserSkillId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<long>("SkillId")
                        .HasColumnType("bigint")
                        .HasColumnName("skill_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("UserSkillId")
                        .HasName("userskills_pkey");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("tb_user_skills", "dbo");
                });

            modelBuilder.Entity("CbMaker.Domain.WorkExperience", b =>
                {
                    b.Property<long>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("work_experience_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WorkExperienceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("EnterpriseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("enterprise_name");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("external_id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<long>("JobTitleId")
                        .HasColumnType("bigint")
                        .HasColumnName("job_title_id");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("responsibilities");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("WorkExperienceId")
                        .HasName("workexperience_pkey");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ExternalId" }, "workexperience_externalid_key")
                        .IsUnique();

                    b.ToTable("tb_work_experience", "dbo");
                });

            modelBuilder.Entity("CbMaker.Domain.AcademicHistory", b =>
                {
                    b.HasOne("CbMaker.Domain.AcademicField", "AcademicField")
                        .WithMany("AcademicHistories")
                        .HasForeignKey("AcademicFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CbMaker.Domain.Degree", "Degree")
                        .WithMany("AcademicHistories")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CbMaker.Domain.User", "User")
                        .WithMany("AcademicHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicField");

                    b.Navigation("Degree");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CbMaker.Domain.Language", b =>
                {
                    b.HasOne("CbMaker.Domain.AcademicField", "AcademicField")
                        .WithMany("Languages")
                        .HasForeignKey("AcademicFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicField");
                });

            modelBuilder.Entity("CbMaker.Domain.UserInfo", b =>
                {
                    b.HasOne("CbMaker.Domain.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("CbMaker.Domain.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CbMaker.Domain.UserInfoLanguage", b =>
                {
                    b.HasOne("CbMaker.Domain.Language", "Language")
                        .WithMany("UserInfoLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CbMaker.Domain.User", null)
                        .WithMany("UserInfoLanguages")
                        .HasForeignKey("UserId");

                    b.HasOne("CbMaker.Domain.UserInfo", "UserInfo")
                        .WithMany("UserInfoLanguages")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("CbMaker.Domain.UserSkill", b =>
                {
                    b.HasOne("CbMaker.Domain.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CbMaker.Domain.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CbMaker.Domain.WorkExperience", b =>
                {
                    b.HasOne("CbMaker.Domain.JobTitle", "JobTitle")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CbMaker.Domain.User", "User")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTitle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CbMaker.Domain.AcademicField", b =>
                {
                    b.Navigation("AcademicHistories");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("CbMaker.Domain.Degree", b =>
                {
                    b.Navigation("AcademicHistories");
                });

            modelBuilder.Entity("CbMaker.Domain.JobTitle", b =>
                {
                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("CbMaker.Domain.Language", b =>
                {
                    b.Navigation("UserInfoLanguages");
                });

            modelBuilder.Entity("CbMaker.Domain.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("CbMaker.Domain.User", b =>
                {
                    b.Navigation("AcademicHistories");

                    b.Navigation("UserInfo")
                        .IsRequired();

                    b.Navigation("UserInfoLanguages");

                    b.Navigation("UserSkills");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("CbMaker.Domain.UserInfo", b =>
                {
                    b.Navigation("UserInfoLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
